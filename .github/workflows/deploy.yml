name: Deploy Vulnerable Application # workflow name

on:
  push:
    branches:
      - master

jobs:

#SAST

  sonarQubeTrigger:
    name: SonarQube Trigger
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: SonarQube Scan
        uses: kitabisa/sonarqube-action@master
        with:
          host: ${{ secrets.SONARQUBE_HOST }}
          login: ${{ secrets.SONARQUBE_TOKEN }}

  checking-credentials:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

  njsscan:
    runs-on: ubuntu-latest
    name: njsscan code scanning
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: nodejsscan scan
        id: njsscan
        uses: ajinabraham/njsscan-action@master
        with:
          args: ". --sarif --output results.sarif || true"
      - name: Upload njsscan report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif

#DEPLOY STATGING


  deploy-heroku-staging:
    name: Deploy Heroku Staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "damn-vulnerable-app-staging" #Must be unique in Heroku
          heroku_email: "elianbarci@hotmail.com"
          remote_branch: "master"
          usedocker: true

#DAST


  zap-scan-faraday:
    needs: [deploy-heroku-staging]
    runs-on: ubuntu-latest
    container:
      image: owasp/zap2docker-stable
      options: --user root -v ${{github.workspace}}:/zap/wrk/:rw
    steps:
      - name: Run Zap Baseline Scan
        run: zap-full-scan.py -t ${{secrets.MASTER_URL}} -x zap-report.xml | echo 0
      - name: Upload Zap Report Artifact
        uses: actions/upload-artifact@v2
        with:
          name: zap-report
          path: zap-report.xml

  upload:
    needs: [zap-scan-faraday]
    runs-on: ubuntu-latest
    container:
      image: python:3.9.1
      options: --user root -v ${{ github.workspace }}:/reports:rw
    steps:
      - name: Get current date
        id: date
        run: echo “ :set-output name=date :$(date +’%Y-%m-%d’)”
      - name: Download Zap Report Artifact
        uses: actions/download-artifact@master
        with:
          name: zap-report
          path: zap-report
      - name: Download Bandit Report Artifact
        uses: actions/download-artifact@master
        with:
          name: bandit-report
          path: bandit-report

      - name: Upload Reports to Faraday
          As you can see, we’ve used a dockerized version of OWASP Zap. For this reason, we
          need to choose the docker image and declare some options.
          Integrating Faraday in the software development process Part One 9
        run: |
          pip install faraday-cli
          faraday-cli auth -f ${{ secrets.FARADAY_HOST }} -u ${{
          secrets.FARADAY_USERNAME }} -p ${{ secrets.FARADAY_PASSWORD }}
          faraday-cli create_ws ${{ github.event.repository.name }}-
          ${{ steps.date.outputs.date }}-${{ github.run_number }}
          faraday-cli process_report -w ${{ github.event.repository.
          name }}-${{ steps.date.outputs.date }}-${{ github.run_number }} /
          reports/bandit-report/flaskapp_faraday_bandit.xml
          faraday-cli process_report -w ${{ github.event.repository.name }}-${{ steps.
          date.outputs.date }}-${{ github.run_number }} /reports/zap-report/zap_report.xml

  zap_scan:
    runs-on: ubuntu-latest
    name: Scan ZAP website
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          target: ${{secrets.MASTER_URL}}
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

#DEPLOY PROD

  deploy-heroku-prod:
    name: Deploy Heroku Prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "damn-vulnerable-app-elian" #Must be unique in Heroku
          heroku_email: "elianbarci@hotmail.com"
          remote_branch: "master"
          usedocker: true