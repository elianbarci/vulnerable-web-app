name: Deploy Vulnerable Application # workflow name

on:
  push:
    branches:
      - staging

jobs:

#SAST

  sonarQubeTrigger:
    name: SonarQube Trigger
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: SonarQube Scan
        uses: kitabisa/sonarqube-action@master
        with:
          host: ${{ secrets.SONARQUBE_HOST }}
          login: ${{ secrets.SONARQUBE_TOKEN }}

  gitleaks-credentials:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}

  njsscan:
    runs-on: ubuntu-latest
    name: njsscan code scanning
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
      - name: nodejsscan scan
        id: njsscan
        uses: ajinabraham/njsscan-action@master
        with:
          args: ". --sarif --output results.sarif || true"
      - name: Upload njsscan report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif

  anchore-scan:
    name: Test container with Anchor
    runs-on: ubuntu-latest
    needs: [njsscan, gitleaks-credentials,sonarQubeTrigger]
    steps:
      - uses: actions/checkout@v2
      - name: Build the Container image
        run: docker build . --file Dockerfile --tag localbuild/testimage:latest
      - uses: anchore/scan-action@v3
        id: scan
        with:
          image: "localbuild/testimage:latest"
          severity-cutoff: critical
          fail-build: false
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}


  snyk-security:
    runs-on: ubuntu-latest
    needs: [njsscan, gitleaks-credentials,sonarQubeTrigger]
    steps:
    - uses: actions/checkout@v2
    - name: Build the Container image
      run: docker build . --file Dockerfile --tag localbuild/testimage:latest
    - name: Run Snyk to check Docker image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: localbuild/testimage:latest
        args: --file=Dockerfile
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif
        wait-for-processing: true

#DEPLOY STATGING

  deploy-heroku-staging:
    name: Deploy Heroku Staging
    # needs: [njsscan, gitleaks-credentials,sonarQubeTrigger]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "vulnerable-elianbarci-staging" #Must be unique in Heroku
          heroku_email: "elianbarci@hotmail.com"
          remote_branch: "master"
          usedocker: true

#DAST

  zap-scan-faraday:
    needs: [deploy-heroku-staging]
    name: ZAP scan for Faraday
    runs-on: ubuntu-latest
    container:
      image: owasp/zap2docker-stable
      options: --user root -v ${{github.workspace}}:/zap/wrk/:rw
    steps:
      - name: Run Zap Baseline Scan
        run: zap-baseline.py -d -t ${{secrets.STAGING_URL}} -x zap-report| echo "Viene bien"
      - name: Upload Zap Report Artifact
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap-report.xml
      - name: Upload Reports to Faraday
        run: |
            pip install faraday-cli
            faraday-cli auth -f ${{ secrets.FARADAY_HOST }} -u ${{secrets.FARADAY_USERNAME }} -p ${{ secrets.FARADAY_PASSWORD }}
            faraday-cli workspace create ${{ github.event.repository.name }}-${{ steps.date.outputs.date }}-${{ github.run_number }}
            faraday-cli status
            faraday-cli tool report /zap/wrk/zap-report.xml

  zap_scan:
    runs-on: ubuntu-latest
    needs: [deploy-heroku-staging]
    name: Scan ZAP website
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          target: ${{secrets.STAGING_URL}}
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

#DEPLOY PROD

  merge-master:

      runs-on: ubuntu-latest
      needs: [zap-scan-faraday, zap_scan, anchore-scan, snyk-security]
      name: Merge to Master

      steps:
        - uses: actions/checkout@master

        - name: Merge staging -> master
          uses: devmasx/merge-branch@master
          with:
            type: now
            target_branch: master
            github_token: ${{ secrets.TOKEN_GITHUB }}

  deploy-heroku-prod:
    name: Deploy Heroku Prod
    needs: [merge-master]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "vulnerable-elianbarci-master" #Must be unique in Heroku
          heroku_email: "elianbarci@hotmail.com"
          remote_branch: "master"
          usedocker: true